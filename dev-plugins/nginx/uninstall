#!/bin/bash

# Source Gokku helper functions
if [ -f "/opt/gokku/scripts/plugin-helpers.sh" ]; then
    source /opt/gokku/scripts/plugin-helpers.sh
fi

SERVICE_NAME="$1"

if [ -z "$SERVICE_NAME" ]; then
    echo "Usage: $0 <service-name>"
    exit 1
fi

echo "-----> Uninstalling nginx service: $SERVICE_NAME"

# Check if container exists
if ! container_exists "$SERVICE_NAME"; then
    echo "-----> Service '$SERVICE_NAME' not found"
    exit 0
fi

# Stop and remove container
echo "-----> Stopping nginx container: $SERVICE_NAME"
if container_is_running "$SERVICE_NAME"; then
    docker stop "$SERVICE_NAME" 2>/dev/null || true
fi

echo "-----> Removing nginx container: $SERVICE_NAME"
docker rm "$SERVICE_NAME" 2>/dev/null || true

# Remove service directory
SERVICE_DIR="/opt/gokku/services/$SERVICE_NAME"
if [ -d "$SERVICE_DIR" ]; then
    echo "-----> Removing service directory: $SERVICE_DIR"
    rm -rf "$SERVICE_DIR"
fi

# Remove any linked app configurations
echo "-----> Cleaning up linked applications..."
for app_dir in /opt/gokku/apps/*; do
    if [ -d "$app_dir" ]; then
        # Remove nginx service links from app configs
        if [ -f "$app_dir/gokku.yml" ]; then
            # This would need to be implemented based on how Gokku stores service links
            # For now, we'll just log that cleanup might be needed
            echo "       Note: Check app configurations for nginx service links"
        fi
    fi
done

# Clean up any nginx images (keep the base image)
echo "-----> Cleaning up nginx images..."
# Only remove custom nginx images if any were created
# Keep the base nginx:alpine image for other services

echo "-----> Nginx service uninstalled successfully"
echo "       Service: $SERVICE_NAME"
echo "       All containers and configurations removed"

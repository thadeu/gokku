#!/bin/bash
# Gokku Universal Installer
# Defaults to server mode, use --client for client installation
#
# Usage:
#   curl -fsSL https://gokku-vm.com/install | bash              # Server mode (default)
#   curl -fsSL https://gokku-vm.com/install | bash -s -- --server   # Server mode (explicit)
#   curl -fsSL https://gokku-vm.com/install | bash -s -- --client   # Client mode

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m'

# Configuration
REPO_URL="${GOKKU_REPO_URL:-https://raw.githubusercontent.com/thadeu/gokku/refs/heads/main}"
INSTALL_DIR="${GOKKU_INSTALL_DIR:-$HOME/.gokku}"
BIN_DIR="/usr/local/bin"
VERSION="${GOKKU_VERSION:-latest}"
MODE=""

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --server)
            MODE="server"
            shift
            ;;
        --client)
            MODE="client"
            shift
            ;;
        --help)
            echo "Gokku Universal Installer"
            echo ""
            echo "Usage: $0 [OPTIONS]"
            echo ""
            echo "Options:"
            echo "  --server    Install on Linux server (default mode)"
            echo "  --client    Install CLI only (local machine or macOS)"
            echo "  --help      Show this help"
            echo ""
            echo "Default behavior:"
            echo "  - Server mode: Full server installation with Docker support"
            echo "  - Client mode: CLI-only installation for remote deployments"
            echo ""
            echo "If no option is provided, installer defaults to server mode."
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            exit 1
            ;;
    esac
done

log() {
    echo -e "${CYAN}[$(date +'%H:%M:%S')]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[$(date +'%H:%M:%S')]${NC} ✓ $1"
}

log_error() {
    echo -e "${RED}[$(date +'%H:%M:%S')]${NC} ✗ $1"
}

log_warn() {
    echo -e "${YELLOW}[$(date +'%H:%M:%S')]${NC} ⚠ $1"
}

print_banner() {
    echo ""
    echo -e "${CYAN}╔════════════════════════════════════════════════════════╗${NC}"
    echo -e "${CYAN}║                                                        ║${NC}"
    echo -e "${CYAN}║              Gokku Universal Installer                 ║${NC}"
    echo -e "${CYAN}║                                                        ║${NC}"
    echo -e "${CYAN}╚════════════════════════════════════════════════════════╝${NC}"
    echo ""
}

detect_mode() {
    if [ -n "$MODE" ]; then
        log "Mode: $MODE (explicit)"
        return
    fi

    # Default to server mode
    MODE="server"
    log "Default mode: server"
}

detect_os() {
    case "$(uname -s)" in
        Linux*)     OS=linux;;
        Darwin*)    OS=darwin;;
        *)          OS=unknown;;
    esac

    case "$(uname -m)" in
        x86_64)     ARCH=amd64;;
        arm64)      ARCH=arm64;;
        aarch64)    ARCH=arm64;;
        *)          ARCH=unknown;;
    esac

    log "System: $OS/$ARCH"
}

check_requirements() {
    log "Checking requirements..."

    local missing_deps=()

    if ! command -v curl &> /dev/null && ! command -v wget &> /dev/null; then
        missing_deps+=("curl or wget")
    fi

    if ! command -v git &> /dev/null; then
        missing_deps+=("git")
    fi

    # Go is only required for client development, not for server installation
    if [ "$MODE" = "client" ] && ! command -v go &> /dev/null; then
        missing_deps+=("go")
    fi

    if [ ${#missing_deps[@]} -gt 0 ]; then
        log_error "Missing dependencies: ${missing_deps[*]}"
        echo ""
        echo "Install them:"
        if [ "$OS" = "linux" ]; then
            if [ "$MODE" = "client" ]; then
                echo "  sudo apt update && sudo apt install -y build-essential git curl yq jq"
                sudo apt update && sudo apt install -y build-essential git curl yq jq
            else
                echo "  sudo apt update && sudo apt install -y build-essential git curl yq jq"

            fi
        else
            if [ "$MODE" = "client" ]; then
                echo "  brew install git"
            else
                echo "  brew install git"
            fi
        fi
        exit 1
    fi

    log_success "Requirements met"
}

download_binary() {
    log "Downloading gokku binary for $OS/$ARCH..."

    # Use system temp directory for downloads to avoid HOME issues
    local temp_dir="/tmp/gokku-install"
    mkdir -p $temp_dir
    cd $temp_dir

    # Construct binary name based on OS and architecture
    local binary_name="gokku-$OS-$ARCH"

    # Try multiple sources in order of preference
    local binary_urls=(
        # 1. GitHub Releases (latest)
        "https://github.com/thadeu/gokku/releases/latest/download/$binary_name"
        # 2. Specific version from releases (if VERSION is set)
        "https://github.com/thadeu/gokku/releases/download/${VERSION}/$binary_name"
        # 3. Fallback to main branch (for development)
        "$REPO_URL/bin/$binary_name"
    )

    local downloaded=false

    for url in "${binary_urls[@]}"; do
        log "Trying to download from: $url"

        if curl -fsSL "$url" -o "gokku" 2>/dev/null; then
            log_success "Binary downloaded successfully from: $url"
            downloaded=true
            break
        fi
    done

    if [ "$downloaded" = false ]; then
        log_error "Failed to download binary for $OS/$ARCH"
        echo ""
        echo "Available binaries should be at:"
        echo "  https://github.com/thadeu/gokku/releases/latest"
        echo ""
        echo "Or check the main branch:"
        echo "  $REPO_URL/bin/"
        echo ""
        echo "Please ensure the binary exists in the repository or releases."
        exit 1
    fi

    # Make binary executable
    chmod +x gokku

    log_success "Binary ready for installation"
}

install_binary() {
    log "Installing gokku to $BIN_DIR..."

    # Use the same temp directory as download_binary
    local temp_dir="/tmp/gokku-install"
    cd $temp_dir

    # Try to install to /usr/local/bin
    if [ -w "$BIN_DIR" ]; then
        mv gokku $BIN_DIR/
        chmod +x $BIN_DIR/gokku
    else
        sudo mv gokku $BIN_DIR/
        sudo chmod +x $BIN_DIR/gokku
    fi

    log_success "Binary installed"
}


setup_client() {
    log "Setting up client configuration..."

    mkdir -p $INSTALL_DIR

    # Create ~/.gokkurc file to mark this as a client installation
    cat > ~/.gokkurc << 'EOF'
mode=client
EOF
    log_success "Client mode configuration created at ~/.gokkurc"

    # Create initial config if doesn't exist
    if [ ! -f "$INSTALL_DIR/config.yml" ]; then
        cat > $INSTALL_DIR/config.yml << 'EOF'
# Gokku CLI Configuration
servers: []

# Example server configuration:
# servers:
#   - name: production
#     host: ubuntu@ec2-xxx-xxx-xxx-xxx.compute.amazonaws.com
#     base_dir: /opt/gokku
#     default: true
EOF
        log_success "Client config created"
    else
        log "Client config already exists"
    fi
}

setup_server() {
    log "Setting up server deployment..."

    # Create ~/.gokkurc file to mark this as a server installation
    cat > ~/.gokkurc << 'EOF'
mode=server
EOF
    log_success "Server mode configuration created at ~/.gokkurc"

    sudo usermod -aG docker $(whoami)

    local BASE_DIR="/opt/gokku"

    # Server mode requires Linux
    if [ "$OS" = "darwin" ]; then
        log_error "Server mode is not supported on macOS"
        log_error "macOS can only be used as a client to deploy to remote servers"
        log_error "Use --client flag or run without arguments for client installation"
        exit 1
    fi

    # Create base directory
    if [ ! -d "$BASE_DIR" ]; then
        if ! sudo mkdir -p $BASE_DIR 2>/dev/null; then
            log_error "Failed to create directory: $BASE_DIR"
            log_error "Make sure you have sudo privileges or the directory is writable"
            exit 1
        fi
        sudo chown -R $USER:$USER $BASE_DIR
        log_success "Base directory created: $BASE_DIR"
    fi

    # Download server scripts
    cd $INSTALL_DIR/tmp

    local scripts=(
        "scripts/docker-helpers.sh"
    )

    mkdir -p $BASE_DIR/scripts

    for script in "${scripts[@]}"; do
        if ! curl -fsSL "$REPO_URL/$script" -o "$BASE_DIR/$script"; then
            log_error "Failed to download $script"
            exit 1
        fi
        chmod +x "$BASE_DIR/$script"
    done

    log_success "Server setup complete"
}

print_usage_client() {
    echo ""
    echo -e "${GREEN}╔════════════════════════════════════════════════════════╗${NC}"
    echo -e "${GREEN}║                                                        ║${NC}"
    echo -e "${GREEN}║         Client Installation Complete! 🚀              ║${NC}"
    echo -e "${GREEN}║                                                        ║${NC}"
    echo -e "${GREEN}╚════════════════════════════════════════════════════════╝${NC}"
    echo ""
    echo -e "${CYAN}Gokku CLI installed successfully!${NC}"
    echo ""
    echo -e "${YELLOW}Quick Start:${NC}"
    echo ""
    echo "1. Add git remote for your app:"
    echo -e "   ${CYAN}git remote add api-production ubuntu@server:api${NC}"
    echo ""
    echo "2. Configure environment variables:"
    echo -e "   ${CYAN}gokku config set PORT=8080 --remote api-production${NC}"
    echo -e "   ${CYAN}gokku config list --remote api-production${NC}"
    echo ""
    echo "3. Deploy:"
    echo -e "   ${CYAN}git push api-production main${NC}"
    echo ""
    echo "4. View logs:"
    echo -e "   ${CYAN}gokku logs api production --remote api-production${NC}"
    echo ""
    echo "5. Check status:"
    echo -e "   ${CYAN}gokku status api production --remote api-production${NC}"
    echo ""
    echo -e "${CYAN}Configuration:${NC} $INSTALL_DIR/config.yml"
    echo -e "${CYAN}Binary:${NC} $BIN_DIR/gokku"
    echo ""
    echo -e "${CYAN}Get help:${NC}"
    echo -e "   ${CYAN}gokku --help${NC}"
    echo ""
}

print_usage_server() {
    local server_ip=$(curl -s ifconfig.me 2>/dev/null || hostname -I | awk '{print $1}' || echo "YOUR_SERVER_IP")

    echo ""
    echo -e "${GREEN}╔════════════════════════════════════════════════════════╗${NC}"
    echo -e "${GREEN}║                                                        ║${NC}"
    echo -e "${GREEN}║         Server Installation Complete! 🚀              ║${NC}"
    echo -e "${GREEN}║                                                        ║${NC}"
    echo -e "${GREEN}╚════════════════════════════════════════════════════════╝${NC}"
    echo ""
    echo -e "${CYAN}Server:${NC} $USER@$server_ip"
    echo -e "${CYAN}Base Directory:${NC} /opt/gokku"
    echo ""
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo ""
    echo -e "${CYAN}Next Steps:${NC}"
    echo ""
    echo ""
    echo -e "${YELLOW}1. Create your app:${NC}"
    echo -e "   ${CYAN}gokku apps create api --remote production${NC}"
    echo ""
    echo -e "${YELLOW}2. On your local machine, add git remote:${NC}"
    echo -e "   ${CYAN}git remote add api-production $USER@$server_ip:api${NC}"
    echo ""
    echo -e "${YELLOW}3. Deploy:${NC}"
    echo -e "   ${CYAN}git push api-production main${NC}"
    echo ""
    echo -e "${CYAN}Management Commands:${NC}"
    echo "  gokku config list -a api -e production"
    echo ""
}

cleanup() {
    # Clean up temporary directory used for downloads
    rm -rf /tmp/gokku-install
}

main() {
    print_banner
    detect_mode
    detect_os
    check_requirements
    download_binary
    install_binary

    if [ "$MODE" = "server" ]; then
        setup_server
        print_usage_server
    else
        setup_client
        print_usage_client
    fi

    cleanup

    echo ""
    log_success "Installation complete! 🎉"
    echo ""
    echo -e "Run: ${CYAN}gokku --help${NC} to get started"
    echo ""
}

trap 'log_error "Installation failed at line $LINENO"' ERR

main

